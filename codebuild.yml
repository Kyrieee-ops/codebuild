AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to build and push Docker images to ECR from GitHub.

Parameters:
  GitHubConnectionArn:
    Description: The ARN of the GitHub connection for CodePipeline.
    Type: String
  FullRepositoryId:
    Description: The full repository ID to use with your CodeConnections connection.
    Type: String
    Default: "Kyrieee-ops/codebuild"
  BranchName:
    Description: The branch name to use with your GitHub repository.
    Type: String
    Default: master
  CodePipelineName:
    Description: The CodePipeline pipeline name that will deploy to your CloudFormation stack.
    Type: String
    Default: codebuild-codepipeline
  ECRRepositoryName:
    Description: The name of the ECR repository to push the Docker image.
    Type: String
    Default: amazonlinux-repository

Resources:
  # ECRリポジトリの作成
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ECRRepositoryName

  # CodeBuild用のIAMロール
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeBuildRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CodeBuildProject}:*"
              - Effect: Allow
                Action:
                - ecr:PutImage
                - ecr:InitiateLayerUpload
                - ecr:UploadLayerPart
                - ecr:CompleteLayerUpload
                - ecr:BatchCheckLayerAvailability
                - ecr:DescribeRepositories
                - ecr:GetAuthorizationToken
                Resource: 
                  - !Sub "arn:${AWS::Partition}:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ECRRepositoryName}"

  # CodeBuildプロジェクトの作成
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: github-to-ecr-build
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
          env:
            variables:
              IMAGE_REPO_NAME: python-unittest
              IMAGE_TAG: dev
            pre_build:
              commands:
               - echo Logging in to Amazon ECR...
               - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com 
            build:
              commands:
              - echo Build started on `date`
              - echo Building the Docker image...          
              - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
              - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
            post_build:
              commands:
              - echo Build completed on `date`
              - echo Pushing the Docker image to ECR...
              - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/ $IMAGE_REPO_NAME:$IMAGE_TAG
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true # Dockerビルドのために必要
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        Type: CODEPIPELINE
    # DependsOn: CodeBuildRole # CodeBuildRoleが先に作成されることを保証
      # SourceVersion: !Ref BranchName
      # EnvironmentVariables:
      #   - Name: REPOSITORY_URI
      #     Value: !Sub "${ECRRepository.Arn}"

  # CodePipelineの作成
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref CodePipelineName
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3 # アーティファクトの保存場所をS3に指定
        Location: !ImportValue s3bucketbackup # 事前に作成したS3バケットのインポート
      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: '1'
              Configuration:
                ConnectionArn: !Ref GitHubConnectionArn
                FullRepositoryId: !Ref FullRepositoryId
                BranchName: !Ref BranchName
              OutputArtifacts:
                - Name: SourceOutput
              RoleArn: !GetAtt CodePipelineRole.Arn   
              RunOrder: 1 # 実行順序
        - Name: Build
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: SourceOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
              # OutputArtifacts:
              #   - Name: BuildOutput

  # CodePipeline用のIAMロール
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodePipelineRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - ecr:GetAuthorizationToken
                Resource: "*"

Outputs:
  ECRRepositoryUri:
    Description: "URI of the ECR repository"
    Value: !GetAtt ECRRepository.RepositoryUri